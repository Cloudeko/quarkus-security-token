package dev.cloudeko.zenei.user.deployment;

import io.quarkus.deployment.Capabilities;
import io.quarkus.deployment.Capability;

import java.util.Arrays;
import java.util.function.Function;

public enum DefaultTableSchema {
    USER_ACCOUNT("zenei_user_account", UserAccountTableSchema::fromClient),
    USER_ACCOUNT_EMAIL_ADDRESSES("zenei_user_email_addresses", UserAccountEmailAddressesTableSchema::fromClient);

    private final String tableName;
    private final Function<Capabilities, TableSchema> schemaFunction;

    DefaultTableSchema(String tableName, Function<Capabilities, TableSchema> schemaFunction) {
        this.tableName = tableName;
        this.schemaFunction = schemaFunction;
    }

    public static TableSchema[] schemas(Capabilities capabilities) {
        return Arrays.stream(values())
                .map(schema -> schema.getSchema(capabilities))
                .toArray(TableSchema[]::new);
    }

    public String getTableName() {
        return tableName;
    }

    public TableSchema getSchema(Capabilities capabilities) {
        return schemaFunction.apply(capabilities);
    }

    public enum UserAccountTableSchema implements TableSchema {
        REACTIVE_PG_CLIENT(Capability.REACTIVE_PG_CLIENT,
                "CREATE TABLE IF NOT EXISTS zenei_user_account ("
                        + "id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
                        + "username VARCHAR(100) NOT NULL, "
                        + "image VARCHAR(1000) NULL, "
                        + "created_at TIMESTAMP NOT NULL, "
                        + "updated_at TIMESTAMP NOT NULL)",
                true),
        REACTIVE_MYSQL_CLIENT(Capability.REACTIVE_MYSQL_CLIENT,
                "CREATE TABLE IF NOT EXISTS zenei_user_account ("
                        + "id BIGINT AUTO_INCREMENT PRIMARY KEY, "
                        + "username VARCHAR(100) NOT NULL, "
                        + "image VARCHAR(1000) NULL, "
                        + "created_at TIMESTAMP NOT NULL, "
                        + "updated_at TIMESTAMP NOT NULL)",
                true),
        REACTIVE_MSSQL_CLIENT(Capability.REACTIVE_MSSQL_CLIENT,
                "CREATE TABLE zenei_user_account ("
                        + "id BIGINT IDENTITY(1,1) PRIMARY KEY, "
                        + "username NVARCHAR(100) NOT NULL, "
                        + "image NVARCHAR(1000) NULL, "
                        + "created_at DATETIME2 NOT NULL, "
                        + "updated_at DATETIME2 NOT NULL)",
                false),
        REACTIVE_DB2_CLIENT(Capability.REACTIVE_DB2_CLIENT,
                "CREATE TABLE zenei_user_account ("
                        + "id BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1), "
                        + "username VARCHAR(100) NOT NULL, "
                        + "image VARCHAR(1000), "
                        + "created_at TIMESTAMP NOT NULL, "
                        + "updated_at TIMESTAMP NOT NULL, "
                        + "PRIMARY KEY (id))",
                false),
        REACTIVE_ORACLE_CLIENT(Capability.REACTIVE_ORACLE_CLIENT,
                "CREATE TABLE zenei_user_account ("
                        + "id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
                        + "username VARCHAR2(100) NOT NULL, "
                        + "image VARCHAR2(1000), "
                        + "created_at TIMESTAMP NOT NULL, "
                        + "updated_at TIMESTAMP NOT NULL)",
                true);

        private final String client;
        private final String ddl;
        private final boolean supportsIfNotExists;

        UserAccountTableSchema(String client, String ddl, boolean supportsIfNotExists) {
            this.client = client;
            this.ddl = ddl;
            this.supportsIfNotExists = supportsIfNotExists;
        }

        public static UserAccountTableSchema fromClient(Capabilities capabilities) {
            for (UserAccountTableSchema schema : values()) {
                if (capabilities.isPresent(schema.client)) {
                    return schema;
                }
            }
            throw new IllegalArgumentException("No table schema found for the given capabilities");
        }

        public String getClient() {
            return client;
        }

        public String getDdl() {
            return ddl;
        }

        public boolean isSupportsIfNotExists() {
            return supportsIfNotExists;
        }
    }

    public enum UserAccountEmailAddressesTableSchema implements TableSchema {
        REACTIVE_PG_CLIENT(Capability.REACTIVE_PG_CLIENT,
                "CREATE TABLE IF NOT EXISTS zenei_user_email_addresses ("
                        + "id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
                        + "user_id BIGINT NOT NULL, "
                        + "email_address VARCHAR(100) NOT NULL, "
                        + "primary_email BOOLEAN NOT NULL, "
                        + "email_verified BOOLEAN NOT NULL, "
                        + "created_at TIMESTAMP NOT NULL, "
                        + "updated_at TIMESTAMP NOT NULL)",
                true),
        REACTIVE_MYSQL_CLIENT(Capability.REACTIVE_MYSQL_CLIENT,
                "CREATE TABLE IF NOT EXISTS zenei_user_email_addresses ("
                        + "id BIGINT AUTO_INCREMENT PRIMARY KEY, "
                        + "user_id BIGINT NOT NULL, "
                        + "email_address VARCHAR(100) NOT NULL, "
                        + "primary_email BOOLEAN NOT NULL, "
                        + "email_verified BOOLEAN NOT NULL, "
                        + "created_at TIMESTAMP NOT NULL, "
                        + "updated_at TIMESTAMP NOT NULL)",
                true),
        REACTIVE_MSSQL_CLIENT(Capability.REACTIVE_MSSQL_CLIENT,
                "CREATE TABLE zenei_user_email_addresses ("
                        + "id BIGINT IDENTITY(1,1) PRIMARY KEY, "
                        + "user_id BIGINT NOT NULL, "
                        + "email_address NVARCHAR(100) NOT NULL, "
                        + "primary_email BIT NOT NULL, "
                        + "email_verified BIT NOT NULL, "
                        + "created_at DATETIME2 NOT NULL, "
                        + "updated_at DATETIME2 NOT NULL)",
                false),
        REACTIVE_DB2_CLIENT(Capability.REACTIVE_DB2_CLIENT,
                "CREATE TABLE zenei_user_email_addresses ("
                        + "id BIGINT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1), "
                        + "user_id BIGINT NOT NULL, "
                        + "email_address VARCHAR(100) NOT NULL, "
                        + "primary_email SMALLINT NOT NULL, "
                        + "email_verified SMALLINT NOT NULL, "
                        + "created_at TIMESTAMP NOT NULL, "
                        + "updated_at TIMESTAMP NOT NULL, "
                        + "PRIMARY KEY (id))",
                false),
        REACTIVE_ORACLE_CLIENT(Capability.REACTIVE_ORACLE_CLIENT,
                "CREATE TABLE zenei_user_email_addresses ("
                        + "id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
                        + "user_id NUMBER NOT NULL, "
                        + "email_address VARCHAR2(100) NOT NULL, "
                        + "primary_email NUMBER NOT NULL, "
                        + "email_verified NUMBER NOT NULL, "
                        + "created_at TIMESTAMP NOT NULL, "
                        + "updated_at TIMESTAMP NOT NULL)",
                true);

        private final String client;
        private final String ddl;
        private final boolean supportsIfNotExists;

        UserAccountEmailAddressesTableSchema(String client, String ddl, boolean supportsIfNotExists) {
            this.client = client;
            this.ddl = ddl;
            this.supportsIfNotExists = supportsIfNotExists;
        }

        public static UserAccountEmailAddressesTableSchema fromClient(Capabilities capabilities) {
            for (UserAccountEmailAddressesTableSchema schema : values()) {
                if (capabilities.isPresent(schema.client)) {
                    return schema;
                }
            }
            throw new IllegalArgumentException("No table schema found for the given capabilities");
        }

        public String getClient() {
            return client;
        }

        public String getDdl() {
            return ddl;
        }

        public boolean isSupportsIfNotExists() {
            return supportsIfNotExists;
        }
    }
}
